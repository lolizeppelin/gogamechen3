#!/usr/bin/python
# -*- encoding: utf-8 -*-
import json
import logging
import sys

from simpleutil.config import cfg
from simpleutil.config.cfg import types
from simpleutil.utils import table

from goperation.api.client.config import client_opts
from goperation.api.client.config import index_opts
from goperation.api.client import ManagerClient

from goperation.api.client.utils import prepare_results

from gogamechen3 import common
from gogamechen3.api.client import Gogamechen3DBClient

CONF = cfg.CONF

timeout_opts = [
    cfg.IntOpt('timeout',
               default=30,
               help='Send file/Upgrade/Uploade timeout'),
]

one_opts = [
    cfg.IntOpt('group_id',
               required=True,
               short='g',
               help='Package for game group')
]

game_type_opts = [
    cfg.StrOpt('objtype',
               short='o',
               choices=[common.GAMESERVER, common.GMSERVER, common.CROSSSERVER],
               help='Game objtype objfile for')
]

sub_type_opts = [
    cfg.StrOpt('subtype',
               short='s',
               choices=['datadb', 'logdb', 'appfile'],
               help='Game subtype objfile for')
]

type_opts = game_type_opts + sub_type_opts

create_opts = [
    cfg.StrOpt('name',
               short='n',
               required=True,
               help='Game group name'),
    cfg.StrOpt('desc',
               help='Game group description')
]

version_opts = [
    cfg.IntOpt('package_id',
               short='p',
               required=True,
               help='Package id'),
    cfg.StrOpt('rversion',
               required=True,
               help='Cdn resource version'),
]

group_opts = cfg.StrOpt('group_id',
                        default='all',
                        short='g',
                        help='Package for game group, 1,2,3 or 1-5, or all')


new_version_opts = [
    cfg.IntOpt('group_id',
               required=True,
               short='g',
               help='Package for game group'
               ),
    cfg.IntOpt('resource_id',
               short='r',
               required=True,
               help='Same resource id pakcage'
               ),
    cfg.StrOpt('rversion',
               short='n',
               required=True,
               help='New resource version'
               ),
    cfg.ListOpt('exclude',
                item_type=types.Integer(),
                help='Exclude package id',
                )
]


format_opt = cfg.StrOpt('format',
                        default='table',
                        choices=['table', 'json'],
                        help='Out put format'
                        )


backup_opts = [
    cfg.IntOpt('last',
               short='l',
               help='last entity'),
    cfg.IntOpt('start',
               short='s',
               help='start entity'),
    cfg.BoolOpt('master',
                short='m',
                default=True,
                help='backup from master database'),
               ]


def client(session=None):
    return Gogamechen3DBClient(httpclient=ManagerClient(url=CONF.gcenter, port=CONF.gcenter_port,
                                                        retries=CONF.retries, timeout=CONF.apitimeout,
                                                        token=CONF.trusted, session=session))


def list():
    CONF.register_cli_opts(index_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.groups_index)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    group_heads = ['id', 'name', 'desc']
    print '\033[1;32;40m\r',
    print 'List game group success'
    print '\033[0m'
    tb = table.PleasantTable(ident=0, columns=group_heads, counter=True)
    for package in data:
        tb.add_row([package.get('group_id'), package.get('name'), package.get('desc')])
    print tb.pformat()


def create():
    CONF.register_cli_opts(create_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.groups_create, CONF.name, CONF.desc)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print '\033[1;32;40m\r',
    print 'Create game group success'
    print '\033[0m'
    group = data[0]
    print 'group id: %s' % group.get('group_id')
    print 'group name: %s' % group.get('name')


def areas():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_areas, CONF.group_id, {'packages': True})
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print '\033[1;32;40m\r',
    print 'List all areas of group: %d success' % CONF.group_id
    print '\033[0m'
    area_heads = ['area_id', 'name', 'entity', 'port', 'dnsnames', 'external_ips', 'versions', 'packages']
    tb = table.PleasantTable(ident=0, columns=area_heads, counter=True)
    areas = data[0].get('areas')
    for area in areas:
        tb.add_row([area.get('area_id'), area.get('name'), area.get('entity'), area.get('port'),
                    ','.join(area.get('dnsnames')), ','.join(area.get('external_ips')),
                    area.get('versions'), ','.join(area.get('packagenames')), ])
    print tb.pformat()


def packages():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_packages, CONF.group_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print '\033[1;32;40m\r',
    print 'List all packages of group: %d success\n' % CONF.group_id
    print [p.get('package_id') for p in data]
    print '\033[0m'
    area_heads = ['id', 'name', 'mark', 'status', 'resource_id']
    tb = table.PleasantTable(ident=0, columns=area_heads, counter=True)
    for package in data:
        tb.add_row([package.get('package_id'), package.get('package_name'),
                    package.get('mark'), package.get('status'),
                    package.get('resource_id')])
    print tb.pformat()


def show():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_show, CONF.group_id, detail=True)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    group = data[0]
    entitys = group.get('entitys')
    print '\033[1;32;40m\r',
    print 'Show package success'
    print 'status DELETED:-2  UNACTIVE:-1  ACTIVE:0',
    print '\033[0m'
    print 'group id: %s' % group.get('group_id')
    print 'group name: %s' % group.get('name')
    gm = entitys.get(common.GMSERVER)
    if gm:
        gm = gm[0]
        print '\033[1;32;40m\r',
        print '{0:{fill}{align}{size}}'.format(common.GMSERVER,
                                               fill='-', align="^", size=25)
        print '\033[0m'
        print '%s entity: %d' % (common.GMSERVER, gm.get('entity'))
        print '%s status: %d' % (common.GMSERVER, gm.get('status'))
    cross_s = entitys.get(common.CROSSSERVER)
    if cross_s:
        print '\033[1;32;40m\r',
        print '{0:{fill}{align}{size}}'.format(common.CROSSSERVER,
                                               fill='-', align="^", size=25)
        print '\033[0m'
        cross_heads = ['entity', '', 'status']
        tb = table.PleasantTable(ident=0, columns=cross_heads, counter=True)
        for cross in cross_s:
            tb.add_row([cross.get('entity'), cross.get('status')])
        print tb.pformat()
    games = entitys.get(common.GAMESERVER)
    if games:
        game_heads = ['entity', 'areas', 'status']
        print '\033[1;32;40m\r',
        print '{0:{fill}{align}{size}}'.format(common.GAMESERVER,
                                               fill='-', align="^", size=25)
        print '\033[0m'
        tb = table.PleasantTable(ident=0, columns=game_heads, counter=True)
        for game in games:
            tb.add_row([game.get('entity'), ','.join(map(str, game.get('areas'))),
                        game.get('status')])
        print tb.pformat()


def delete():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_delete, CONF.group_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    group = data[0]
    print('\033[1;32;40m')
    print 'Delete group success'
    print 'group id: %s' % group.get('group_id')
    print 'group name: %s' % group.get('name')
    print('\033[0m')


def chiefs():
    CONF.register_cli_opt(group_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_chiefs,
                                         CONF.group_id, body=dict(cross=True))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    chief_heads = ['group_id', 'entity', 'objtype', 'local_ip', 'ports', 'external_ips', 'dnsnames']
    tb = table.PleasantTable(ident=0, columns=chief_heads, counter=True)
    for chief in data:
        tb.add_row([chief.get('group_id'), chief.get('entity'), chief.get('objtype'),
                    chief.get('local_ip'),
                    ','.join(map(str, chief.get('ports'))),
                    ','.join(map(str, chief.get('external_ips'))),
                    ','.join(map(str, chief.get('dnsnames'))),
                    ])
    print tb.pformat()


def upversion():
    CONF.register_cli_opts(new_version_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_packages,
                                         CONF.group_id, body=None)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        print('\033[0m')
        sys.exit(1)
    _packages = []
    for package in data:
        if package['resource_id'] == CONF.resource_id:
            _packages.append(package['package_id'])

    if CONF.exclude:
        exclude = set(CONF.exclude)
        if exclude - set(_packages):
            print('\033[1;31;40m')
            print('Exclude package not in package list')
            print('\033[0m')
            sys.exit(1)
        _packages = set(_packages) - exclude

    if not _packages:
        print('\033[1;31;40m')
        print 'No package found with resource %d' % CONF.resource_id
        print('\033[0m')

    _packages = sorted(_packages)

    for package_id in _packages:
        body = {'rversion': CONF.rversion}
        code, result, data = prepare_results(_client.package_update,
                                             CONF.group_id, str(package_id), body=body)
        if code:
            print('\033[1;31;40m')
            print 'Fail, code %d, result %s' % (code, result)
            print 'Change package rversion fail, package %d' % package_id
            print('\033[0m')
            sys.exit(1)
        print 'Change package %d to %s' % (package_id, CONF.rversion)

    print('\033[1;31;40m')
    print 'All package found change rversion %s success' % CONF.rversion
    print('\033[0m')


def databases():
    CONF.register_cli_opts(one_opts)
    CONF.register_cli_opt(format_opt)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_databases, CONF.group_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    if CONF.format == 'table':
        print '\033[1;32;40m\r',
        print 'List all databases of group: %d success\n' % CONF.group_id
        print '\033[0m'
        db_heads = ['id', 'host', 'port', 'ro_user', 'ro_passwd', 'subtype', 'schema']
        entity_heads = ['id', 'group', 'objtype']
        for entity in data:
            tb = table.PleasantTable(ident=0, columns=entity_heads, counter=False)
            tb.add_row([entity.get('entity'), entity.get('group_id'), entity.get('objtype')])
            print tb.pformat()
            tb = table.PleasantTable(ident=15, columns=db_heads, counter=False)
            _databases = entity.get('databases')
            if _databases:
                for subtype in entity.get('databases'):
                    database = _databases[subtype]
                    tb.add_row([database.get('database_id'), database.get('host'), database.get('port'),
                                database.get('ro_user'), database.get('ro_passwd'),  database.get('subtype'),
                                database.get('schema'),
                                ])
            print tb.pformat()
    elif CONF.format == 'json':
        print json.dumps(data, ensure_ascii=False)


def backup():
    CONF.register_cli_opts(one_opts)
    CONF.register_cli_opt(format_opt)
    CONF.register_cli_opts(backup_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.group_databases, CONF.group_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)

    start = CONF.start
    last = CONF.last

    backups = {}
    for entity in data:
        if start is not None and entity['entity'] < start:
            continue
        if last and entity['entity'] > last:
            continue
        database = entity['databases'][common.DATADB]

        _schema = dict(user=database['ro_user'],
                       passwd=database['ro_passwd'],
                       schema=database['schema'],
                       )
        if not CONF.master and database['slaves']:
            database_id = database['slaves'][0]['database_id']
            address = database['slaves'][0]['address']
        else:
            database_id = database['database_id']
            address = dict(host=database['host'], port=database['port'])
        if database_id not in backups:
            backups[database_id] = {
                'schemas': [],
                'address': address
            }
        backups[database_id]['schemas'].append(_schema)

    if CONF.format == 'json':
        jdata = []
        for database_id in backups:
            jdata.append(
                {
                    'address': backups[database_id]['address'],
                    'schemas': backups[database_id]['schemas']
                }
            )
        print json.dumps(jdata, indent=2, ensure_ascii=True)
    else:
        db_head = ['user', 'passwd', 'schema']
        for database_id in backups:
            db = backups[database_id]
            tb = table.PleasantTable(ident=0, columns=db_head, counter=False)
            print '\033[1;32;40m\r',
            print 'Schemas in database %d, host: %s, port: %d' % (database_id,
                                                                  db['address']['host'],
                                                                  db['address']['port'])
            print '\033[0m'
            for sc in db['schemas']:
                tb.add_row([sc.get('user'), sc.get('passwd'), sc.get('schema')])
            print tb.pformat()
            print('\n')


def main():
    FUNCS = ['list', 'create', 'areas', 'show', 'delete', 'chiefs', 'packages', 'upversion', 'databases', 'backup']
    try:
        func = sys.argv.pop(1)
        if func not in FUNCS:
            raise ValueError
    except (IndexError, ValueError):
        print 'action is: %s' % '  '.join(FUNCS)
        print 'use -h for help'
        sys.exit(1)
    func = eval(func)
    logging.basicConfig(level=logging.WARN)
    CONF.register_cli_opts(client_opts)
    func()


if __name__ == '__main__':
    main()
