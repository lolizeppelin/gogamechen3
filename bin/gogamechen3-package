#!/usr/bin/python
# -*- encoding: utf-8 -*-
import time
import logging
import sys

from simpleutil.config import cfg
from simpleutil.utils import table
from simpleutil.utils import timeutils

from goperation.api.client.config import client_opts
from goperation.api.client.config import index_opts
from goperation.api.client import ManagerClient

from goperation.api.client.utils import prepare_results
from goperation.api.client.utils import wait_finish
from goperation.api.client.utils import p_asyncrequest

from gopcdn.utils import build_fileinfo

from gogamechen3 import common
from gogamechen3.api.client import Gogamechen3DBClient

CONF = cfg.CONF

timeout_opts = [
    cfg.IntOpt('timeout',
               default=30,
               help='Send file/Upgrade/Uploade timeout'),
]

group_opt = cfg.IntOpt('group_id',
                       required=True,
                       short='g',
                       help='Package for game group')

package_opt = cfg.IntOpt('package_id',
                         short='p',
                         required=True,
                         help='Package id')


one_opts = [
    group_opt,
    package_opt,

]

game_type_opts = [
    cfg.StrOpt('objtype',
               short='o',
               choices=[common.GAMESERVER, common.GMSERVER, common.CROSSSERVER],
               help='Game objtype objfile for')
]

sub_type_opts = [
    cfg.StrOpt('subtype',
               short='s',
               choices=['datadb', 'logdb', 'appfile'],
               help='Game subtype objfile for')
]

type_opts = game_type_opts + sub_type_opts

create_package_opts = [
    group_opt,
    cfg.StrOpt('name',
               required=True,
               short='n',
               help='Package name'),
    cfg.StrOpt('mark',
               required=True,
               short='m',
               help='Package mark name'),
    cfg.IntOpt('resource_id',
               short='r',
               required=True,
               help='Which game resource package bond with'),
    cfg.StrOpt('desc',
               help='Package desc'),


]

create_pfile_opts = [
    cfg.StrOpt('address',
               help='File download address, if None, mean upload from local'),
    cfg.StrOpt('file',
               required=True,
               help='File local path, will get file info from it'),
    cfg.StrOpt('gversion',
               required=True,
               help='Package file version'),
    cfg.StrOpt('ftype',
               required=True,
               choices=[common.FULL_PACKAGE, common.SMALL_PACKAGE],
               help='Package file type, small, update, full'),
    cfg.StrOpt('desc',
               help='Package file desc'),
]

rversion_opt = cfg.StrOpt('rversion', required=True, help='Cdn resource version')

gversion_opt = cfg.StrOpt('gversion', required=True, help='Package file version')



def client(session=None):
    return Gogamechen3DBClient(httpclient=ManagerClient(url=CONF.gcenter, port=CONF.gcenter_port,
                                                        retries=CONF.retries, timeout=CONF.apitimeout,
                                                        token=CONF.trusted, session=session))


def all():
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.package_all, areas=True)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print '\033[1;32;40m\r',
    print 'List all game packages success'
    print '\033[0m'

    file_heads = ['id', 'ftype', 'gversion', 'status', 'uptime', 'address']
    area_heads = ['area', 'name', 'entity', 'status', 'ips', 'dnsnames', 'port', 'version']

    for package in data:
        resource = package.get('resource')
        login = package.get('login')
        files = package.get('files')
        areas = package.get('areas')
        print '\033[1;32;40m\r',
        print '---------Pakcage Info---------',
        print '\033[0m'
        print 'package id: %s' % package.get('package_id')
        print 'package name: %s' % package.get('package_name')
        print 'package version: %s' % package.get('gversion')
        print 'mark: %s' % package.get('mark')
        print 'etype: %s' % package.get('etype')
        print 'name: %s' % package.get('name')
        print 'status: %s' % package.get('status')
        print 'magic: %s' % package.get('magic')
        print 'extension: %s' % package.get('extension')
        print 'rversion: %s' % package.get('rversion')
        print '---------Resource Info---------'
        print 'resource_id: %d' % resource.get('resource_id')
        print 'versions: %s' % resource.get('versions')
        print 'urls: %s' % resource.get('urls')
        print '----------Login Info----------'
        print 'group id: %s' % package.get('group_id')
        print 'local_ip: %s' % login.get('local_ip')
        print 'ports: %s' % str(login.get('ports'))
        print 'objtype: %s' % login.get('objtype')
        print 'dnsnames: %s' % str(login.get('dnsnames'))
        print 'external_ips: %s' % str(login.get('external_ips'))
        print '---------Package file---------'
        tb = table.PleasantTable(ident=0, columns=file_heads, counter=True)
        if files:
            for _file in files:
                tb.add_row([_file.get('pfile_id'), _file.get('ftype'), _file.get('gversion'),
                            _file.get('status'), _file.get('uptime'), _file.get('address')])
        print tb.pformat()
        print '---------Areas info---------'
        tb = table.PleasantTable(ident=0, columns=area_heads, counter=True)
        if areas:
            for area in areas:
                tb.add_row([area.get('area_id'), area.get('areaname'),
                            area.get('entity'), area.get('status'), ','.join(area.get('external_ips')),
                            ','.join(area.get('dnsnames')), area.get('port'), area.get('version')])
        print tb.pformat()

def resources():
    CONF.register_cli_opt(group_opt)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.package_group_resources, CONF.group_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print '\033[1;32;40m\r',
    print 'List all game packages resource success'
    print '\033[0m'

    resource_heads = ['resource_id', 'etype', 'name']
    version_heads = ['version_id', 'version', 'alias', 'time']
    for resource in data:
        versions = resource.get('versions')
        tb = table.PleasantTable(ident=0, columns=resource_heads, counter=False)
        tb.add_row([resource.get('resource_id'), resource.get('etype'), resource.get('name')])
        print tb.pformat()
        if versions:
            tb = table.PleasantTable(ident=8, columns=version_heads, counter=True)
            for version in versions:
                tb.add_row([version.get('version_id'), version.get('version'), version.get('alias'),
                            timeutils.unix_to_iso(version.get('vtime'))])
            print tb.pformat()


def list():
    CONF.register_cli_opts(index_opts)
    CONF.register_cli_opt(group_opt)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.package_index, CONF.group_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)

    package_heads = ['package_id', 'package_name', 'gversion',
                     'mark', 'group_id', 'rversion', 'resource_id',
                     'status', 'magic', 'extension']
    print '\033[1;32;40m\r',
    print 'List game packages success'
    print '\033[0m'
    tb = table.PleasantTable(ident=0, columns=package_heads, counter=True)
    for package in data:
        tb.add_row([package.get('package_id'), package.get('package_name'), package.get('gversion'),
                    package.get('mark'),
                    package.get('group_id'), package.get('rversion'), package.get('resource_id'),
                    package.get('status'), package.get('magic'), package.get('extension'),
                    ])
    print tb.pformat()


def create():
    CONF.register_cli_opts(create_package_opts)
    CONF(project='cmd')
    _client = client()
    if CONF.desc:
        body = dict(dict=CONF.desc)
    else:
        body = None
    code, result, data = prepare_results(_client.package_create, CONF.group_id,
                                         CONF.resource_id, CONF.name, CONF.mark, body=body)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print '\033[1;32;40m\r',
    print 'Create game packages success'
    print '\033[0m'
    package = data[0]
    resource = package.get('resource')
    print 'group id: %s' % package.get('group_id')
    print 'package id: %s' % package.get('package_id')
    print 'package name: %s' % package.get('package_name')
    print 'status: %s' % package.get('status')
    print 'mark: %s' % package.get('mark')
    print 'etype: %s' % package.get('etype')
    print 'name: %s' % package.get('name')
    print '---------Resource Info---------'
    print 'resource_id: %d' % resource.get('resource_id')
    print 'versions: %s' % resource.get('versions')
    print 'urls: %s' % resource.get('urls')


def show():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.package_show, CONF.group_id, CONF.package_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    if not data:
        print('\033[1;32;40m')
        print 'Now package exist'
        print('\033[0m')

    pfile_heads = ['ftype', 'gversion', 'address', 'uptime', 'status', 'desc']
    package = data[0]
    group = package.get('group')
    files = package.get('files')
    print '\033[1;32;40m\r',
    print 'Show package success'
    print '\033[0m'
    print 'desc: %s' % package.get('desc')
    print 'package id: %s' % package.get('package_id')
    print 'package name: %s' % package.get('package_name')
    print 'package version: %s' % package.get('gversion')
    print 'status: %s' % package.get('status')
    print 'mark: %s' % package.get('mark')
    print 'etype: %s' % package.get('etype')
    print 'name: %s' % package.get('name')
    print 'magic: %s' % package.get('magic')
    print 'extension: %s' % package.get('extension')
    print 'rversion: %s' % package.get('rversion')
    print '---------Resource Info---------'
    print 'rversion quote id: %s' % package.get('rquote_id')
    print 'resource_id: %d' % package.get('resource_id')
    print 'versions: %s' % package.get('versions')
    print 'urls: %s' % package.get('urls')
    print '----------Group Info----------'
    print 'group id: %s' % group.get('group_id')
    print 'group name: %s' % group.get('name')
    print '---------Package file---------'
    tb = table.PleasantTable(ident=0, columns=pfile_heads, counter=True)
    for pfile in files:
        tb.add_row([pfile.get('ftype'), pfile.get('gversion'), pfile.get('address'),
                    pfile.get('uptime'), pfile.get('status'), pfile.get('desc')])
    print tb.pformat()


def delete():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.package_delete, CONF.group_id, CONF.package_id)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Delete package success'
    print('\033[0m')


def upgrade():
    CONF.register_cli_opts(one_opts)
    CONF.register_cli_opt(rversion_opt)
    CONF.register_cli_opts(timeout_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.package_resource_upgrade, CONF.group_id, CONF.package_id,
                                         version=CONF.rversion, timeout=CONF.timeout)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    asyncrequest = data[0]
    now = int(time.time())
    request_id = asyncrequest.get('request_id')
    sleep = asyncrequest.get('finishtime') - now
    dead = asyncrequest.get('deadline') - now
    print('\033[1;32;40m')
    print 'Package resource upgrade async request %s has been sended' % request_id
    print 'group id: %s' % CONF.group_id
    print 'package id: %s' % CONF.package_id
    print 'rversion: %s' % CONF.rversion
    print('\033[0m')
    print 'Result will respon after %d, dead after %d' % (sleep, dead)
    if not wait_finish(_client, asyncrequest):
        print('\033[1;31;40m')
        print 'Async request not finish after deadline'
        print('\033[0m')
    p_asyncrequest(_client, request_id=request_id, details=False)


def rversion():
    CONF.register_cli_opts(one_opts)
    CONF.register_cli_opt(rversion_opt)
    CONF(project='cmd')
    _client = client()
    body = dict(rversion=CONF.rversion)
    code, result, data = prepare_results(_client.package_update, CONF.group_id, CONF.package_id, body=body)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Change package default resource version success'
    print('\033[0m')


def gversion():
    CONF.register_cli_opts(one_opts)
    CONF.register_cli_opt(gversion_opt)
    CONF(project='cmd')
    _client = client()
    body = dict(gversion=CONF.gversion)
    code, result, data = prepare_results(_client.package_update, CONF.group_id, CONF.package_id, body=body)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Change package gversion success'
    print('\033[0m')



def enable():
    CONF.register_cli_opts(one_opts)
    _client = client()
    code, result, data = prepare_results(_client.package_update, CONF.group_id, CONF.package_id,
                                         body=dict(status=common.ENABLE))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Enable package success'
    print('\033[0m')


def disable():
    CONF.register_cli_opts(one_opts)
    _client = client()
    code, result, data = prepare_results(_client.package_update, CONF.group_id, CONF.package_id,
                                         body=dict(status=common.DISABLE))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Disenable package success'
    print('\033[0m')


def upload():
    CONF.register_cli_opt(package_opt)
    CONF.register_cli_opts(timeout_opts)
    CONF.register_cli_opts(create_pfile_opts)
    CONF(project='cmd')

    if not CONF.address:
        if not CONF.file:
            print('\033[1;31;40m')
            print 'upload file path is None'
            print('\033[0m')
        try:
            import websocket
        except ImportError:
            print('\033[1;31;40m')
            print 'python-websocket-client not install'
            print('\033[0m')
            sys.exit(1)

    _client = client()
    timeout = CONF.timeout or 60
    body = dict(ftype=CONF.ftype, gversion=CONF.gversion, desc=CONF.desc,
                timeout=timeout)
    if CONF.address:
        body.setdefault('address', CONF.address)
    else:
        fileinfo = build_fileinfo(CONF.file)
        body.setdefault('fileinfo', fileinfo)
    code, result, data = prepare_results(_client.packagefile_create,
                                         CONF.package_id, body=body)
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    info = data[0]
    if CONF.address:
        print '\033[1;32;40m\r',
        print 'Create package file success'
        print 'Pfile id  is %s' % info.get('pfile_id')
        print('\033[0m')
    else:
        uri = info.get('uri')
        print '\033[1;32;40m\r',
        print 'Get upload file websocket uri success'
        print 'uri is %s:%d' % (uri.get('ipaddr'), uri.get('port'))
        print 'try connect websocket after 0.1 seconds'
        print('\033[0m')
        time.sleep(0.1)
        ws = websocket.create_connection("ws://%s:%d" % (uri.get('ipaddr'), uri.get('port')),
                                         subprotocols=["binary"])
        print "connect websocket success, send file now"
        _start = time.time()
        with open(CONF.file, 'rb') as f:
            while True:
                buffer = f.read(4096)
                if buffer:
                    ws.send(buffer)
                else:
                    print 'file send finish, size %d, time use %d' % (fileinfo.get('size'),
                                                                      int(time.time()) - _start)
                    break


def main():
    FUNCS = ['all', 'list', 'show', 'create', 'delete',
             'upgrade', 'gversion', 'rversion', 'resources',
             'enable', 'disable', 'upload']

    try:
        func = sys.argv.pop(1)
        if func not in FUNCS:
            raise ValueError
    except (IndexError, ValueError):
        print 'action is: %s' % '  '.join(FUNCS)
        print 'use -h for help'
        sys.exit(1)
    func = eval(func)
    logging.basicConfig(level=logging.WARN)
    CONF.register_cli_opts(client_opts)
    func()


if __name__ == '__main__':
    main()
